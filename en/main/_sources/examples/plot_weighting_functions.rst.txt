
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_weighting_functions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_plot_weighting_functions.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_weighting_functions.py:


Computation of Weighting Functions
==================================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

This example shows how to use the :py:class:`pyrtlib.weighting_functions.WeightingFunctions` method 
to compute the weighting functions for the MWS channels for the U.S. standard atmospheric profile.

.. GENERATED FROM PYTHON SOURCE LINES 9-27

.. code-block:: Python


    import numpy as np
    import warnings
    warnings.filterwarnings("ignore", category=UserWarning)
    from pyrtlib.weighting_functions import WeightingFunctions
    from pyrtlib.climatology import AtmosphericProfiles as atmp
    from pyrtlib.utils import ppmv2gkg, mr2rh, get_frequencies_sat

    z, p, _, t, md = atmp.gl_atm(atmp.US_STANDARD)
    gkg = ppmv2gkg(md[:, atmp.H2O], atmp.H2O)
    rh = mr2rh(p, t, gkg)[0] / 100

    wf = WeightingFunctions(z, p, t, rh)
    wf.frequencies = np.array([50.5, 53.2, 54.35, 54.9, 59.4, 58.825, 58.4])
    wgt = wf.generate_wf()

    wf.plot_wf(wgt, 'Downlooking', ylim=[0, 60], legend=True, figsize=(8, 6), dpi=100)




.. image-sg:: /examples/images/sphx_glr_plot_weighting_functions_001.png
   :alt: Downlooking
   :srcset: /examples/images/sphx_glr_plot_weighting_functions_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 28-29

As above but with the weighting functions computed in uplooking mode.

.. GENERATED FROM PYTHON SOURCE LINES 29-35

.. code-block:: Python


    wf.satellite = False
    wgt = wf.generate_wf()

    wf.plot_wf(wgt, 'Uplooking', ylim=[0, 10], figsize=(8, 6), dpi=100)




.. image-sg:: /examples/images/sphx_glr_plot_weighting_functions_002.png
   :alt: Uplooking
   :srcset: /examples/images/sphx_glr_plot_weighting_functions_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 36-39

The weighting functions can also be computed for a different set of channels.
The bandpass values are used to compute the weighting functions for the ATMS channels.
The following code compute the weighting functions for the ATMS channels 5-15.

.. GENERATED FROM PYTHON SOURCE LINES 39-57

.. code-block:: Python


    cf53 = 53.596
    cf57 = 57.290344
    frq = np.array([52.8, cf53-0.115, cf53+0.115, 54.4, 54.94, 55.5, cf57, 
           cf57-0.217, cf57+0.217, 
           cf57-0.3222-0.048, cf57-0.3222+0.048, cf57+0.3222-0.048, cf57+0.3222+0.048,
           cf57-0.3222-0.022, cf57-0.3222+0.022, cf57+0.3222-0.022, cf57+0.3222+0.022,
           cf57-0.3222-0.010, cf57-0.3222+0.010, cf57+0.3222-0.010, cf57+0.3222+0.010,
           cf57-0.3222-0.0045, cf57-0.3222+0.0045, cf57+0.3222-0.0045, cf57+0.3222+0.0045])

    wf.satellite = True
    wf.frequencies = frq
    wf.bandpass = np.array([1, 2, 1, 1, 1, 1, 2, 4, 4, 4, 4])
    wf.legend_labels = [f'Channel {i+5}' for i in range(len(wf.bandpass))]
    wgt = wf.generate_wf()

    wf.plot_wf(wgt, 'ATMS Channels 5-15', ylim=[0, 70], xlim=[0, 0.11], legend=True, figsize=(8, 6), dpi=100)




.. image-sg:: /examples/images/sphx_glr_plot_weighting_functions_003.png
   :alt: ATMS Channels 5-15
   :srcset: /examples/images/sphx_glr_plot_weighting_functions_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 58-61

The weighting functions can also be computed for a different set of frequencies.
The following code compute the weighting functions for the MWS channels for a standard tropical atmosphere.
for grouped frequencies.

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: Python


    wf.satellite = True
    wf.frequencies = get_frequencies_sat('MWS')
    wgt = wf.generate_wf()
    wf.plot_wf_grouped(wgt, 'MWS Channels (grouped)', ylim=[0, 60], 
                      grouped_frequencies=[4, 9, 19, 1, 13],
                      grouped_labels=['23-52', '53-55', '57', '89', '164-229'], dpi=350)


.. image-sg:: /examples/images/sphx_glr_plot_weighting_functions_004.png
   :alt: MWS Channels (grouped)
   :srcset: /examples/images/sphx_glr_plot_weighting_functions_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.473 seconds)


.. _sphx_glr_download_examples_plot_weighting_functions.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_weighting_functions.ipynb <plot_weighting_functions.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_weighting_functions.py <plot_weighting_functions.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_weighting_functions.zip <plot_weighting_functions.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
