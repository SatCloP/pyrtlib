
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/plot_model_cloudy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_plot_model_cloudy.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_plot_model_cloudy.py:


Performing Downwelling Brightness Temperature calculation in cloudy condition.
==============================================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

This example shows how to use the
:py:class:`pyrtlib.tb_spectrum.TbCloudRTE` method to calculate brightness temperature from ground (downwelling) in cloudy condition

.. GENERATED FROM PYTHON SOURCE LINES 9-75

.. code-block:: Python


    import matplotlib.pyplot as plt
    from matplotlib.ticker import FixedLocator, FormatStrFormatter
    plt.rcParams.update({'font.size': 15})
    import numpy as np
    np.seterr('raise')

    from pyrtlib.climatology import AtmosphericProfiles as atmp
    from pyrtlib.tb_spectrum import TbCloudRTE
    from pyrtlib.utils import ppmv2gkg, mr2rh

    atm = ['Tropical',
           'Midlatitude Summer',
           'Midlatitude Winter',
           'Subarctic Summer',
           'Subarctic Winter',
           'U.S. Standard']

    fig, ax = plt.subplots(1, 1, figsize=(12, 8))

    z, p, d, t, md = atmp.gl_atm(atmp.MIDLATITUDE_SUMMER)
    gkg = ppmv2gkg(md[:, atmp.H2O], atmp.H2O)
    rh = mr2rh(p, t, gkg)[0] / 100

    mdl = 'R19SD'

    ang = np.array([90.])
    frq = np.arange(20, 61, 1)
    nf = len(frq)

    denliq = np.zeros(z.shape)
    denice = np.zeros(z.shape)
    cldh = np.empty((2, 2))

    for i in [False, True]:
        if not i:
            text_plot = 'clear-sky'
        else:
            # build a cloud
            ib = 1
            it = 3
            denliq[ib:it + 1] = 10 * np.ones((it - ib + 1))
            cldh[:, 0] = np.array([z[ib], z[it]])
            ib = 29
            it = 31
            denice[ib:it + 1] = 0.1 * np.ones((it - ib + 1))
            cldh[:, 1] = np.array([z[ib], z[it]])
            text_plot = 'cloudy'

        ax.set_xlabel('Frequency (GHz)')
        ax.set_ylabel('BT (K)')

        rte = TbCloudRTE(z, p, t, rh, frq, ang)
        rte.satellite = False
        rte.cloudy = i
        rte.init_cloudy(cldh, denice, denliq)
        rte.init_absmdl(mdl)
        df = rte.execute()

        df = df.set_index(frq)
        df.tbtotal.plot(x=frq, ax=ax, linewidth=1,
                        label='{} - {} ({})'.format(atm[atmp.MIDLATITUDE_SUMMER], mdl, text_plot))

    ax.grid(True, 'both')
    ax.legend()
    plt.show()



.. image-sg:: /examples/images/sphx_glr_plot_model_cloudy_001.png
   :alt: plot model cloudy
   :srcset: /examples/images/sphx_glr_plot_model_cloudy_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/pyrtlib/pyrtlib/pyrtlib/tb_spectrum.py:221: UserWarning: It seems that TbCloudRTE.cloudy attribute is not set to True. Sets it to True for running model in cloudy condition.
      warnings.warn("It seems that TbCloudRTE.cloudy attribute is not set to True. "





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.586 seconds)


.. _sphx_glr_download_examples_plot_model_cloudy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_model_cloudy.ipynb <plot_model_cloudy.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_model_cloudy.py <plot_model_cloudy.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_model_cloudy.zip <plot_model_cloudy.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
